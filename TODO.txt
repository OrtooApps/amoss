Amoss - Apex Mocks, Spies and Stubs

Documentation:

    Full interface definition?
    Consider a class diagram for developers?
    Language syntax diagram?

Implement

    withElementsSetTo( List<Object> )
    - Does not have to be the same instance (but will pass if it is)
    - Evey element in the list should '===' the expected

    Implement tests and behaviour for:
        setTo( Map<Id,Object> )
        setTo( Map<String,Object> )
        setTo( Map<Date,Object> )
        withElementsSetTo( Map<Id,Object> )
        withElementsSetTo( Map<String,Object> )
        withElementsSetTo( Map<Date,Object> )

    Documentation for 'setTo'

        Current behaviour - Maps:

            Map<String,Contact> expectedContacts = new Map<String,Contact>{
                'one' => new Contact(), 'two' => new Contact()
            };
        will match:
            Map<String,Contact> passedContacts = new Map<String,Contact>{
                'one' => new Contact(), 'two' => new Contact()
            };
        or
            Map<String,Object> passedContacts = new Map<String,Contact>{
                'one' => new Contact(), 'two' => new Contact()
            };
        or
            Map<String,Object> passedContacts = new Map<String,Object>{
                'one' => new Contact(), 'two' => new Contact()
            };

        but not (will say types don't match, even though it's primarily the values that don't)
            Map<String,Object> passedContacts = new Map<String,Object>{
                'one' => new Contact( Id = '003000000000000' ), 'two' => new Contact()
            };
        or (will say values are different)
            Map<String,Contact> passedContacts = new Map<String,Contact>{
                'one' => new Contact( Id = '003000000000000' ), 'two' => new Contact()
            };

    Test:
        Add a simple test for named syntax for
            * withFieldsSetLike( Sobject )
            * withFieldsSetTo( Map<String,Object> )
            * setTo( List<Object> )

        Positional syntax List:


        Expects Map
        Expects Set

    Look at removing duplication between:
        * Amoss_PositionalParameterValueDefiner
        * Amoss_NamedParameterValueDefiner

    Look at removing duplication between:
        * Amoss_ExpectationFieldsSetToParameter
        * Amoss_ExpectationFieldsSetLikeParameter

    Test overloaded behaviour that results in:
        "was called with an unexpected number of parameters"
        Expecting a List and get something else

    Consider
        Just have a look - how would the new syntax drop into this?

    Move all string contatonation over to string.format, and move ' over to " where used in a string?

    Test:

        Consider adding a lot more tests - check what doesn't fail when you comment things out

        look if there are more 'expects' behaviours to test with named parameters
        do we need to test 'allows' behaviours with named parameters
        withParameters, using a List
        withParameters, using a Map
        callDescription changes based on the type of parameter matching

    Test:

        Test the behaviour of combinations, with regards to 'allowsAnyCall'

            Define a when, then expects, call a method that is not defined, fails the test
            Define a when, then allows,  call a method that is not defined, fails the test
            Define an expects, then when, call a method that is not defined, fails the test
            Define an allows, then when, call a method that is not defined, fails the test
            Define an expects, then allows, call a method that is not defined, fails the test
            Define an allows, then expects, call a method that is not defined, fails the test

        When and allows matches before Expected

        Setting 'returning' when the method has a void return
            methodUnderDoubleWithNoReturn - when setup to return something

        Not setting 'returning' when the method has a non void return
            methodUnderDouble - when setup not to return anything
 
        Test expects with List, Set, Map - test assertions with the same - is List<Object> an Object?
        Test returns List, Set, Map

    General:
        What happens with methods that are not supposed to return something?
            Looks like it works, just need to write tests to prove it

    Spy:
        Currently supports
            mockThing.countOf( 'method' )
        why not 
            mockThing.get().countOf( 'method' )
            this would be in line with the parameter getters