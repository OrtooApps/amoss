Amoss - Apex Mocks, Spies and Stubs

Documentation:

    Full interface definition?
    Consider a class diagram for developers?
    Language syntax diagram?

Question:
    Is there anything we can do about the error we get when we mismatch the types on return?  Doubt it.  Maybe just add a FAQ?

Implement

    Recursive definition:

        Done - Amoss_CompositeValueVerifier
            verify
                If no verifiers defined, error
                Execute each of the verifiers

            toString
                If one verifier, return it
                If more than one verifier, return [ toString, toString, ... ]

    Amoss_ParametersDefiner


    Amoss_ExpectationParameters

        Add member variable
            Amoss_CompositeValueVerifier currentParameterVerifier

        Add addVerifierToCurrentParameter
            currentParameterVerifier.addVerifier( verifier )


    Amoss_ExpectationPositionalParameters
        Add defineNextParameter
            currentParameterVerifier = new Amoss_CompositeValueVerifier()
            expectedParameters.add( currentParameterVerifier );

        Remove setParameterVerifier

    Amoss_ExpectationNamedParameters
        Add defineParameter( String parameterName )
            currentParameterVerifier = new Amoss_CompositeValueVerifier()
            expectedParameters.put( parameterName, currentParameterVerifier );

        Remove setParameterVerifier

    Change all references to setParameterVerifier to addVerifierToCurrentParameter

    Look at how the grammar can then change with recursive definitions - particularly on setting list based value verifiers

    Tests:
        Compilation test for all the combinations that are allowed in the grammar?

        allowsAnyCall with no parameter = allowsAnyCall( true )
        when( 'methodName' ) / allows( 'methodName' ) / expects( 'methodName' ) as a shortcut

    Document:
        verifiedBy
        class documentation for Amoss_MethodHandler would be nice - see Amoss_ValueVerifier

    Recursive condition setting (for lists particularly)
    E.g.

        withParameter()
            .withElementAt(0).setTo( 'expected1' )
            .withElementAt(1).setTo( 'expected2' )
            .withAnyElement().setTo( 'anywhereExpected' )

    And
        withParameter()
            .withElementAt(0).withElementAt(2).setTo('expected1')
            .withElementAt(1).withAnyElement().set('anywhereExpected')

        PMD configuration for test method name format


    Think about withElements
        setTo (given a list)
        what else would you implement?


    Look at removing duplication between:
        * Amoss_ExpectationFieldsSetToParameter
        * Amoss_ExpectationFieldsSetLikeParameter

    Consider
        Just have a look - how would the new syntax drop into this?

    Move all string contatonation over to string.format, and move ' over to " where used in a string?

    Test:

        Consider adding a lot more tests - check what doesn't fail when you comment things out

        look if there are more 'expects' behaviours to test with named parameters
        do we need to test 'allows' behaviours with named parameters
        withParameters, using a List
        withParameters, using a Map

    Test:

        Test the behaviour of combinations, with regards to 'allowsAnyCall'

            Define a when, then expects, call a method that is not defined, fails the test
            Define a when, then allows,  call a method that is not defined, fails the test
            Define an expects, then when, call a method that is not defined, fails the test
            Define an allows, then when, call a method that is not defined, fails the test
            Define an expects, then allows, call a method that is not defined, fails the test
            Define an allows, then expects, call a method that is not defined, fails the test

        When and allows matches before Expected

        Setting 'returning' when the method has a void return
            methodUnderDoubleWithNoReturn - when setup to return something

    Spy:
        Currently supports
            mockThing.countOf( 'method' )
        why not
            mockThing.get().countOf( 'method' )
            this would be in line with the parameter getters


### Collection Specific Comparisons

#### `withElementsSetTo`

Checks that the elements within the collection are the same instances (with the same keys, if appopriate) as the one configured.

Allows you to check that, for example, a Map is generated that contains the same instances as a List that was passed in, meaning that mutations to the elements of the resulting Map will effect the original List.

You can think of this as a half-way house between `setTo` (which checks the collection is the same instance), and `setToTheSameValueAs` (which will match even if the neither the collection nor its elements are the same instances).

Examples:
```java
classToDoubleController
    .when()
        .method( 'methodWithListOfObjects' )
        .withParameter().withElementsSetTo( expectedList )
        .willReturn( 'theReturn' );

classToDoubleController
    .when()
        .method( 'methodWithSetOfObjects' )
        .withParameterNamed( 'parameterName' ).withElementsSetTo( expectedMap )
        .willReturn( 'theReturn' );
```