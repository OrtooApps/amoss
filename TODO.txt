Amoss - Apex Mocks, Spies and Stubs

To finish the named parameters implementation:

    Test: 
        Consider adding a lot more tests - check what doesn't fail...
    
    Document:
        Specifying named parameters
        Consider a class diagram

Documentation:

    Positional vs Named parameters?
    Full interface definition?

Implement

    Document what is included in the installation

    Instructions on installation - implement 'install to Salesforce' - Andy in the Cloud

    Code documentation (search for TODOs)

    Move all string contatonation over to string.format, and move ' over to " where used in a string

    Test:
        look if there are more 'expects' behaviours to test with named parameters
        do we need to test 'allows' behaviours with named parameters
        withParameters, using a List
        withParameters, using a Map
        callDescription changes based on the type of parameter matching

    Test:

        Test the behaviour of combinations, with regards to 'allowsAnyCall'

            Define a when, then expects, call a method that is not defined, fails the test
            Define a when, then allows,  call a method that is not defined, fails the test
            Define an expects, then when, call a method that is not defined, fails the test
            Define an allows, then when, call a method that is not defined, fails the test
            Define an expects, then allows, call a method that is not defined, fails the test
            Define an allows, then expects, call a method that is not defined, fails the test

        When and allows matches before Expected

        Test
            thenAnyParameter / thenAnyParameter

            Amoss_Expectations
            Amoss_Expectation
            Amoss_Expectation.Amoss_ExpectationParameter

        Setting 'returning' when the method has a void return
            methodUnderDoubleWithNoReturn - when setup to return something

        Not setting 'returning' when the method has a non void return
            methodUnderDouble - when setup not to return anything
 
        Test expects with List, Set, Map - test assertions with the same - is List<Object> an Object?
        Test returns List, Set, Map

        Overloaded methods match properly on expectations and whens

    General:

        AmossTest_ClassToDouble.otherMethodUnderDouble was called more times than was expected isn't a great assertion message when the parameters are wrong

        What happens with methods that are not supposed to return something?
            Looks like it works, just need to write tests to prove it

        Can we wrap some of the inner classes with public interfaces, so that the consumer only sees that layer.
        Only if it doesn't increase the assertion failure call stack - although that can probably be solved with exceptions.

    Mock:

        How to pass an 'expects parameter' when we're passing sObjects?

        Consider splitting the class down, to improve the auto-complete

    Spy:

        Currently supports
            mockThing.countOf( 'method' )
        why not 
            mockThing.get().countOf( 'method' )
            this would be in line with the parameter getters

        Checking on what you can call, when
        Consider splitting the CallChecker class down, so you end up with perfect auto-complete

    Assertions:
        Is greater than, etc

    Current Limitations:

        Need to be able to test:

            TestMock templateGeneratorController = new Amoss_Instance( TemplateGenerator.class );

            templateGeneratorController
                .expects()
                .method( 'generate' )
                .withParameter( 'Opportunity' )
                .thenParameter( 'Opportunity_Products_Offered' )
                .thenParameter( new Set<Id>{ opportunityLineItemList[0].OpportunityId } ) // only, this isn't set yet
                .returning( new Map<Id,String>{ opportunityLineItemList[0].OpportunityId => 'The generated Template' } ); // and here too

            Maybe:

            templateGeneratorController
                .expects()
                .method( 'generate' )
                .withParameter( 'Opportunity' )
                .thenParameter( 'Opportunity_Products_Offered' )
                .andAnyParameter()
                .handledBy( new TemplateGeneratorMockHandler() );

            ....

            System.assertEquals( templateGeneratorController.called( 'generate' ).number( 1 ).parameter( 3 ) )

            That's why we need a spy, and a 'handled by'

Test:
    The behaviours work with Object instantiations
